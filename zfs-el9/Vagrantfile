# -*- mode: ruby -*-
# vi: set ft=ruby :

VAGRANTFILE_API_VERSION = "2"


#----------------------------------------------------------------------------
# General settings
#----------------------------------------------------------------------------

# VM name
srv = "dev"

# Vagrant box to use
vagrant_box_image = "centos/stream9"           # OK
#vagrant_box_image = "generic/rocky9"          # OK
#vagrant_box_image = "generic/oracle9"         # OK
#vagrant_box_image = "cg5labs/rocky9_latest"   # OK
#vagrant_box_image = "cg5labs/alma9_latest"    # OK

#----------------------------------------------------------------------------
# Customizations
#----------------------------------------------------------------------------

# Sizing (optional)
vm_cpus   = 4
vm_memory = 16384
storage_pool_name = "default"              # libvirt storage pool qemu-kvm
disk2_size_gb = "1"                        # in GB for qemu-kvm use GB
disk2_size_mb = disk2_size_gb.to_i * 1024  # in MB, for VirtualBox use MB


#----------------------------------------------------------------------------
# Setup Vagrant environment
#----------------------------------------------------------------------------


# set libvirt (qemu-kvm) as default provider on Linux
if RUBY_PLATFORM.downcase.include?("linux")
    ENV['VAGRANT_DEFAULT_PROVIDER'] = 'libvirt'
end

CMD_FILE="./provisioning/ansible_roles_setup.sh"
RC = system(CMD_FILE) 
if RC == false
    puts "==> File not found: #{CMD_FILE}"
    exit
end

#----------------------------------------------------------------------------
# Vagrant VM definition
#----------------------------------------------------------------------------

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = vagrant_box_image
  config.ssh.insert_key = true
  config.ssh.username = "vagrant"

  config.vm.define srv do |v|
    v.vm.hostname = "#{srv}"
    # this interface is used for Ansible ssh see provisioning/inventory)
    if ENV['VAGRANT_DEFAULT_PROVIDER'] = 'libvirt'
        v.vm.network "private_network", ip: "192.168.33.33" # qemu
    else
        v.vm.network "private_network", ip: "192.168.56.33" # VirtualBox
    end

    v.vm.synced_folder 'provisioning', '/vagrant', disabled: false

  end

  # VirtualBox settings
  config.vm.provider "virtualbox" do |vbox|

    vbox.name = "#{srv}"

    if (defined?(vm_memory))
      vbox.memory = vm_memory
    end

    if (defined?(vm_cpus))
      vbox.cpus = vm_cpus
    end

    # Path for the second disk
    disk2 = File.join(Dir.pwd, "#{srv}-disk2.vdi")

    # Create disk only if it doesn't already exist
    unless File.exist?(disk2)
      vbox.customize [
        "createhd", "--filename", disk2, "--size", "#{disk2_size_mb}"
      ]
    end

    # Ensure a SATA controller exists
    vbox.customize ["storagectl", :id,
      "--name", "SATA Controller",
      "--add", "sata",
      "--controller", "IntelAhci"
    ]

    # Attach the disk to SATA Controller port 1
    vbox.customize [
      "storageattach", :id,
      "--storagectl", "SATA Controller",
      "--port", 1,
      "--device", 0,
      "--type", "hdd",
      "--medium", disk2
    ]

  #vbox
  end

  # qemu-kvm settings
  config.vm.provider "libvirt" do |libvirt|

    libvirt.driver = 'kvm'
    # local connection via Unix-socket
    #libvirt.connect_via_ssh = false
    #libvirt.username = 'root'
    libvirt.storage_pool_name = "#{storage_pool_name}"

    if (defined?(vm_cpus))
      libvirt.cpus = vm_cpus
    end

    if (defined?(vm_memory))
      libvirt.memory = vm_memory
    end

    # create second vdisk
    libvirt.storage :file, :size => "#{disk2_size_gb}G", :path => "#{srv}-disk2.qcow"

  end 

  # Shell provisioner
  #config.vm.provision "shell", path: "provisioning/zfs-on-el9.sh"

  # Ansible provisioner
  config.vm.provision "ansible" do |ansible|
    ansible.playbook = "provisioning/zfs-on-linux.yml"

    if ENV['VAGRANT_DEFAULT_PROVIDER'] = 'libvirt'
      ansible.inventory_path = "provisioning/inventory_qemu"
      ansible.extra_vars = { disk2_device: '/dev/vdb' }
    else
      ansible.inventory_path = "provisioning/inventory_vbox"
      ansible.extra_vars = { disk2_device: '/dev/sdb' }
    end
    ansible.become = true
  end

end
